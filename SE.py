import utilities as uT
import matplotlib.pyplot as plt
import atom as at
import CuUtilities as ct


#saved potentials from MOF5, SE function works with any potential though
UClassical = [-477.4257679074742, -724.7932554291327, -885.0179188270347, -987.2639238622828, -1051.198067536929, -1090.0951707725276, -1112.854236760067, -1125.3496866622538, -1131.3621898278348, -1133.2333297180228, -1132.3318643283576, -1129.3870967290625, -1124.7260901071, -1118.4401822223417, -1110.499181104442, -1100.8269415545353, -1089.3487360973672, -1076.0184026933082, -1060.8313795538734, -1043.828261385525, -1025.0923366414463, -1004.7436321336463, -982.9312572983035, -959.8252719925576, -935.608870367761, -910.4713539883594, -884.6021377900241, -858.1858734161628, -831.3986695083096, -804.40532398114, -777.3574480886448, -750.3923474003299, -723.6325238791314, -697.1856709984565, -671.1450465433459, -645.5901227925206, -620.587429400183, -596.1915193499871, -572.4460021634573, -549.3846007651284, -527.0321989146028, -505.4058549357039, -484.5157647177288, -464.3661627942543, -444.9561549024289, -426.2804789733222, -408.3301941756973, -391.0932995896714, -374.555285462798, -358.6996209191096]

zClassical = [2.4,        2.47346939, 2.54693878, 2.62040816, 2.69387755, 2.76734694,
              2.84081633, 2.91428571, 2.9877551,  3.06122449, 3.13469388, 3.20816327,
              3.28163265, 3.35510204, 3.42857143, 3.50204082, 3.5755102,  3.64897959,
              3.72244898, 3.79591837, 3.86938776, 3.94285714, 4.01632653, 4.08979592,
              4.16326531, 4.23673469, 4.31020408, 4.38367347, 4.45714286, 4.53061224,
              4.60408163, 4.67755102, 4.75102041, 4.8244898,  4.89795918, 4.97142857,
              5.04489796, 5.11836735, 5.19183673, 5.26530612, 5.33877551, 5.4122449,
              5.48571429, 5.55918367, 5.63265306, 5.70612245, 5.77959184, 5.85306122,
              5.92653061, 6.        ]

UYClassical = [798077.1406425702, 971383.3808387117, 1074870.174768974, 1076664.1017769475, 977131.6997968603, 808348.1859949518, 615861.3910234234, 437781.6877308799, 294441.81497164577, 189895.45290286493, 118796.62683908855, 72731.47295064435, 43830.485654258126, 26058.57977697525, 15253.421324046098, 8717.964545658808, 4768.879443075801, 2378.546397474473, 927.4484724797506, 44.52897462205567, -491.8139716590973, -813.7953485583638, -1000.2180483297578, -1097.7909855361656, -1133.526953749301, -1121.569313482781, -1066.2691116133199, -962.30403324091, -791.82430008294, -517.8033150310462, -71.73774726150828, 667.6900128811412, 1910.7663107469132, 4017.2012152298666, 7595.777765197878, 13664.94144722812, 23901.69156332598, 41001.208695946036, 69130.32754714148, 114337.01394321196, 184513.84657252353, 288109.0712259206, 430514.1261821174, 607729.6275821936, 799481.2282320973, 967713.8980357267, 1066923.5053603668, 1065058.7745966301, 961752.2156887492, 788851.2853092585]

UXClassical = [2626.571742181975, 3757.8136020952734, 4992.906305669698, 6232.554760019322, 7348.212434534858, 8202.791692311748, 8679.625021991458, 8710.982370820078, 8295.670343353799, 7498.653479036956, 6432.95777771129, 5231.277950853891, 4017.7601109842494, 2888.3228886631514, 1902.751498038673, 1086.9035633509689, 440.7992304768495, -51.68936646227485, -414.4285366616614, -673.1002172267135, -851.7490657385428, -971.1770838141342, -1048.4234806720108, -1096.6542843691684, -1124.9042781728167, -1137.1396831542897, -1129.9627902882885, -1087.8660964294368, -974.080528533293, -713.3506573000716, -159.53986190907926, 966.076750434074, 3194.8280920794905, 7550.05181388993, 16037.696873767009, 32678.16815313978, 65725.7461472417, 132519.69161129108, 270155.6331943379, 558779.4539582212, 1170978.9902040397, 2470039.9469011636, 5181731.01744556, 10618385.94287429, 20747482.2289405, 37513459.74532606, 60674006.2076023, 84869188.29206914, 99885505.53005826, 97476495.21453905]


yClassical = [-3.,         -2.87755102, -2.75510204, -2.63265306, -2.51020408, -2.3877551,
              -2.26530612, -2.14285714, -2.02040816, -1.89795918, -1.7755102,  -1.65306122,
              -1.53061224, -1.40816327, -1.28571429, -1.16326531, -1.04081633, -0.91836735,
              -0.79591837, -0.67346939, -0.55102041, -0.42857143, -0.30612245, -0.18367347,
              -0.06122449,  0.06122449,  0.18367347,  0.30612245,  0.42857143,  0.55102041,
              0.67346939,  0.79591837,  0.91836735,  1.04081633,  1.16326531,  1.28571429,
              1.40816327,  1.53061224,  1.65306122,  1.7755102 ,  1.89795918,  2.02040816,
              2.14285714,  2.26530612,  2.3877551,   2.51020408,  2.63265306,  2.75510204,
              2.87755102,  3.        ]


# SE function to find Energy levels and wavefunction

def SE(potential, psi1, psi2, coordArray, mass, E):
    psi = []
    psi.append(psi1)
    psi.append(psi2)
    for i in range(1, len(coordArray)-1):
        deltaCoordSquared = (coordArray[i]-coordArray[i-1])**2
        convertedCoeff = 2*mass/(uT.hbar**2)*uT.kB*(1/10**20)
        psiNext = (convertedCoeff*deltaCoordSquared*(potential[i]-E)+2)*psi[i]-psi[i-1]
        psi.append(psiNext)
    #print(psi)
    return psi

#print(SE(ct.readinFile("potential01.txt", False), 0, 0.001,ct.readinFile("distance01.txt",False),at.hydrogen.mass, -2101.27875))
#print(SE(ct.readinFile("potential01.txt", False), 0, 0.001,ct.readinFile("distance01.txt",False),at.hydrogen.mass, -907.6))

def wagDog(potential, psi1, psi2, coordArray, mass, E):
    def psi(coordArray):
        return SE(potential, psi1, psi2, coordArray, mass, E)
    plt.plot(coordArray, psi(coordArray))
    plt.show()

def CuMain(E):
    coordArray = ct.readinFile("distance2.txt", False)
    potArray = ct.readinFile("B3lyp.txt", False)
    wagDog(potArray, 0, 0.001, coordArray, at.deuterium.mass, E)


#CuMain(-3495.8614957392012457)
#CuMain(-907.6)
