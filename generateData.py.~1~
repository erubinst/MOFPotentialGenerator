import atom as at
import realisticPotentialModel as pm
import copy as cp
import numpy as np

def generatePotentialData(potentialType, xArray, yArray, zArray, atoms, source,quantump, T):
    minimum = float("inf")
    potentials = []
    gaussian = []
    # loads in isotope object
    isotope = cp.copy(source)
    for val in zArray:
        # sets point of isotope to look at all points along z axis
        isotope.setPoint(0, 0, val)
        if quantump:
            u_sum = pm.UFH(potentialType, x, y, z, atoms, isotope, T)[0]
            gaussianPoint = pm.UFH(potentialType, x, y, z, atoms, isotope, T)[1]
            gaussian.append(gaussianPoint)
        else:
            # classsical version
            u_sum = pm.U(potentialType, isotope, atoms)
        if u_sum < minimum:
            minimum = u_sum
            zval = val
        potentials.append(u_sum)
    minimums.append(minimum)
    return (potentials, gaussian)
        
